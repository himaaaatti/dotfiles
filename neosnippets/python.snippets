snippet #!
	#!/usr/bin/env python

snippet imp
	import ${1:module}

snippet from
	from ${1:package} import ${2:module}

snippet docs
	"""
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${2}
	"""

snippet wh
	while ${1:condition}:
		${2:# TODO: write code...}

snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:# TODO: write code...}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3:# TODO: write code...}

snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:# TODO: write code...}

# Ifs
snippet if
	if ${1:condition}:
		${2:# TODO: write code...}
snippet el
	else:
		${1:# TODO: write code...}
snippet ei
	elif ${1:condition}:
		${2:# TODO: write code...}
# For
snippet for
	for ${1:item} in ${2:items}:
		${3:# TODO: write code...}

snippet lam
	${1:var} = lambda ${2:vars} : ${3:action}

snippet try Try/Except
	try:
		${1:# TODO: write code...}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:# TODO: write code...}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:# TODO: write code...}
snippet try Try/Except/Finally
	try:
		${1:# TODO: write code...}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:# TODO: write code...}
snippet try Try/Except/Else/Finally
	try:
		${1:# TODO: write code...}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:# TODO: write code...}
	finally:
		${6:# TODO: write code...}

# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}

snippet "
	"""
	${1:doc}
	"""

# logging
# glog = get log
snippet glog
	import logging
	logger = logging.getLogger(${1:__name__})
snippet le
	logger.error(${1:msg})
# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
	logger.debug(${1:msg})
snippet lw
	logger.warning(${1:msg})
snippet lc
	logger.critical(${1:msg})
snippet li
	logger.info(${1:msg})
